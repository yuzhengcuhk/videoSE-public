// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diana.proto

#ifndef PROTOBUF_diana_2eproto__INCLUDED
#define PROTOBUF_diana_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_diana_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSetupMessageImpl();
void InitDefaultsSetupMessage();
void InitDefaultsSearchTokenImpl();
void InitDefaultsSearchToken();
void InitDefaultsSearchRequestMessageImpl();
void InitDefaultsSearchRequestMessage();
void InitDefaultsSearchReplyImpl();
void InitDefaultsSearchReply();
void InitDefaultsUpdateRequestMessageImpl();
void InitDefaultsUpdateRequestMessage();
inline void InitDefaults() {
  InitDefaultsSetupMessage();
  InitDefaultsSearchToken();
  InitDefaultsSearchRequestMessage();
  InitDefaultsSearchReply();
  InitDefaultsUpdateRequestMessage();
}
}  // namespace protobuf_diana_2eproto
namespace sse {
namespace diana {
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequestMessage;
class SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class SearchToken;
class SearchTokenDefaultTypeInternal;
extern SearchTokenDefaultTypeInternal _SearchToken_default_instance_;
class SetupMessage;
class SetupMessageDefaultTypeInternal;
extern SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
class UpdateRequestMessage;
class UpdateRequestMessageDefaultTypeInternal;
extern UpdateRequestMessageDefaultTypeInternal _UpdateRequestMessage_default_instance_;
}  // namespace diana
}  // namespace sse
namespace sse {
namespace diana {

// ===================================================================

class SetupMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sse.diana.SetupMessage) */ {
 public:
  SetupMessage();
  virtual ~SetupMessage();

  SetupMessage(const SetupMessage& from);

  inline SetupMessage& operator=(const SetupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetupMessage(SetupMessage&& from) noexcept
    : SetupMessage() {
    *this = ::std::move(from);
  }

  inline SetupMessage& operator=(SetupMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetupMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupMessage* internal_default_instance() {
    return reinterpret_cast<const SetupMessage*>(
               &_SetupMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SetupMessage* other);
  friend void swap(SetupMessage& a, SetupMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetupMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SetupMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetupMessage& from);
  void MergeFrom(const SetupMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetupMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes wrapping_key = 1;
  void clear_wrapping_key();
  static const int kWrappingKeyFieldNumber = 1;
  const ::std::string& wrapping_key() const;
  void set_wrapping_key(const ::std::string& value);
  #if LANG_CXX11
  void set_wrapping_key(::std::string&& value);
  #endif
  void set_wrapping_key(const char* value);
  void set_wrapping_key(const void* value, size_t size);
  ::std::string* mutable_wrapping_key();
  ::std::string* release_wrapping_key();
  void set_allocated_wrapping_key(::std::string* wrapping_key);

  // @@protoc_insertion_point(class_scope:sse.diana.SetupMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wrapping_key_;
  mutable int _cached_size_;
  friend struct ::protobuf_diana_2eproto::TableStruct;
  friend void ::protobuf_diana_2eproto::InitDefaultsSetupMessageImpl();
};
// -------------------------------------------------------------------

class SearchToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sse.diana.SearchToken) */ {
 public:
  SearchToken();
  virtual ~SearchToken();

  SearchToken(const SearchToken& from);

  inline SearchToken& operator=(const SearchToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchToken(SearchToken&& from) noexcept
    : SearchToken() {
    *this = ::std::move(from);
  }

  inline SearchToken& operator=(SearchToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchToken* internal_default_instance() {
    return reinterpret_cast<const SearchToken*>(
               &_SearchToken_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SearchToken* other);
  friend void swap(SearchToken& a, SearchToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchToken* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchToken& from);
  void MergeFrom(const SearchToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 depth = 2;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sse.diana.SearchToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 depth_;
  mutable int _cached_size_;
  friend struct ::protobuf_diana_2eproto::TableStruct;
  friend void ::protobuf_diana_2eproto::InitDefaultsSearchTokenImpl();
};
// -------------------------------------------------------------------

class SearchRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sse.diana.SearchRequestMessage) */ {
 public:
  SearchRequestMessage();
  virtual ~SearchRequestMessage();

  SearchRequestMessage(const SearchRequestMessage& from);

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SearchRequestMessage* other);
  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRequestMessage& from);
  void MergeFrom(const SearchRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes constrained_rcprf_rep = 1;
  void clear_constrained_rcprf_rep();
  static const int kConstrainedRcprfRepFieldNumber = 1;
  const ::std::string& constrained_rcprf_rep() const;
  void set_constrained_rcprf_rep(const ::std::string& value);
  #if LANG_CXX11
  void set_constrained_rcprf_rep(::std::string&& value);
  #endif
  void set_constrained_rcprf_rep(const char* value);
  void set_constrained_rcprf_rep(const void* value, size_t size);
  ::std::string* mutable_constrained_rcprf_rep();
  ::std::string* release_constrained_rcprf_rep();
  void set_allocated_constrained_rcprf_rep(::std::string* constrained_rcprf_rep);

  // bytes kw_token = 3;
  void clear_kw_token();
  static const int kKwTokenFieldNumber = 3;
  const ::std::string& kw_token() const;
  void set_kw_token(const ::std::string& value);
  #if LANG_CXX11
  void set_kw_token(::std::string&& value);
  #endif
  void set_kw_token(const char* value);
  void set_kw_token(const void* value, size_t size);
  ::std::string* mutable_kw_token();
  ::std::string* release_kw_token();
  void set_allocated_kw_token(::std::string* kw_token);

  // fixed32 add_count = 2;
  void clear_add_count();
  static const int kAddCountFieldNumber = 2;
  ::google::protobuf::uint32 add_count() const;
  void set_add_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sse.diana.SearchRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr constrained_rcprf_rep_;
  ::google::protobuf::internal::ArenaStringPtr kw_token_;
  ::google::protobuf::uint32 add_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_diana_2eproto::TableStruct;
  friend void ::protobuf_diana_2eproto::InitDefaultsSearchRequestMessageImpl();
};
// -------------------------------------------------------------------

class SearchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sse.diana.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SearchReply* other);
  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint64 result() const;
  void set_result(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sse.diana.SearchReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_diana_2eproto::TableStruct;
  friend void ::protobuf_diana_2eproto::InitDefaultsSearchReplyImpl();
};
// -------------------------------------------------------------------

class UpdateRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sse.diana.UpdateRequestMessage) */ {
 public:
  UpdateRequestMessage();
  virtual ~UpdateRequestMessage();

  UpdateRequestMessage(const UpdateRequestMessage& from);

  inline UpdateRequestMessage& operator=(const UpdateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateRequestMessage(UpdateRequestMessage&& from) noexcept
    : UpdateRequestMessage() {
    *this = ::std::move(from);
  }

  inline UpdateRequestMessage& operator=(UpdateRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateRequestMessage*>(
               &_UpdateRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UpdateRequestMessage* other);
  friend void swap(UpdateRequestMessage& a, UpdateRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateRequestMessage& from);
  void MergeFrom(const UpdateRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes update_token = 1;
  void clear_update_token();
  static const int kUpdateTokenFieldNumber = 1;
  const ::std::string& update_token() const;
  void set_update_token(const ::std::string& value);
  #if LANG_CXX11
  void set_update_token(::std::string&& value);
  #endif
  void set_update_token(const char* value);
  void set_update_token(const void* value, size_t size);
  ::std::string* mutable_update_token();
  ::std::string* release_update_token();
  void set_allocated_update_token(::std::string* update_token);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sse.diana.UpdateRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr update_token_;
  ::google::protobuf::uint64 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_diana_2eproto::TableStruct;
  friend void ::protobuf_diana_2eproto::InitDefaultsUpdateRequestMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupMessage

// bytes wrapping_key = 1;
inline void SetupMessage::clear_wrapping_key() {
  wrapping_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupMessage::wrapping_key() const {
  // @@protoc_insertion_point(field_get:sse.diana.SetupMessage.wrapping_key)
  return wrapping_key_.GetNoArena();
}
inline void SetupMessage::set_wrapping_key(const ::std::string& value) {
  
  wrapping_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sse.diana.SetupMessage.wrapping_key)
}
#if LANG_CXX11
inline void SetupMessage::set_wrapping_key(::std::string&& value) {
  
  wrapping_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sse.diana.SetupMessage.wrapping_key)
}
#endif
inline void SetupMessage::set_wrapping_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wrapping_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sse.diana.SetupMessage.wrapping_key)
}
inline void SetupMessage::set_wrapping_key(const void* value, size_t size) {
  
  wrapping_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sse.diana.SetupMessage.wrapping_key)
}
inline ::std::string* SetupMessage::mutable_wrapping_key() {
  
  // @@protoc_insertion_point(field_mutable:sse.diana.SetupMessage.wrapping_key)
  return wrapping_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupMessage::release_wrapping_key() {
  // @@protoc_insertion_point(field_release:sse.diana.SetupMessage.wrapping_key)
  
  return wrapping_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupMessage::set_allocated_wrapping_key(::std::string* wrapping_key) {
  if (wrapping_key != NULL) {
    
  } else {
    
  }
  wrapping_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wrapping_key);
  // @@protoc_insertion_point(field_set_allocated:sse.diana.SetupMessage.wrapping_key)
}

// -------------------------------------------------------------------

// SearchToken

// bytes token = 1;
inline void SearchToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchToken::token() const {
  // @@protoc_insertion_point(field_get:sse.diana.SearchToken.token)
  return token_.GetNoArena();
}
inline void SearchToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sse.diana.SearchToken.token)
}
#if LANG_CXX11
inline void SearchToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sse.diana.SearchToken.token)
}
#endif
inline void SearchToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sse.diana.SearchToken.token)
}
inline void SearchToken::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sse.diana.SearchToken.token)
}
inline ::std::string* SearchToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sse.diana.SearchToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchToken::release_token() {
  // @@protoc_insertion_point(field_release:sse.diana.SearchToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sse.diana.SearchToken.token)
}

// uint32 depth = 2;
inline void SearchToken::clear_depth() {
  depth_ = 0u;
}
inline ::google::protobuf::uint32 SearchToken::depth() const {
  // @@protoc_insertion_point(field_get:sse.diana.SearchToken.depth)
  return depth_;
}
inline void SearchToken::set_depth(::google::protobuf::uint32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:sse.diana.SearchToken.depth)
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bytes constrained_rcprf_rep = 1;
inline void SearchRequestMessage::clear_constrained_rcprf_rep() {
  constrained_rcprf_rep_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequestMessage::constrained_rcprf_rep() const {
  // @@protoc_insertion_point(field_get:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
  return constrained_rcprf_rep_.GetNoArena();
}
inline void SearchRequestMessage::set_constrained_rcprf_rep(const ::std::string& value) {
  
  constrained_rcprf_rep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
}
#if LANG_CXX11
inline void SearchRequestMessage::set_constrained_rcprf_rep(::std::string&& value) {
  
  constrained_rcprf_rep_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
}
#endif
inline void SearchRequestMessage::set_constrained_rcprf_rep(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  constrained_rcprf_rep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
}
inline void SearchRequestMessage::set_constrained_rcprf_rep(const void* value, size_t size) {
  
  constrained_rcprf_rep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
}
inline ::std::string* SearchRequestMessage::mutable_constrained_rcprf_rep() {
  
  // @@protoc_insertion_point(field_mutable:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
  return constrained_rcprf_rep_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequestMessage::release_constrained_rcprf_rep() {
  // @@protoc_insertion_point(field_release:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
  
  return constrained_rcprf_rep_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_constrained_rcprf_rep(::std::string* constrained_rcprf_rep) {
  if (constrained_rcprf_rep != NULL) {
    
  } else {
    
  }
  constrained_rcprf_rep_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), constrained_rcprf_rep);
  // @@protoc_insertion_point(field_set_allocated:sse.diana.SearchRequestMessage.constrained_rcprf_rep)
}

// fixed32 add_count = 2;
inline void SearchRequestMessage::clear_add_count() {
  add_count_ = 0u;
}
inline ::google::protobuf::uint32 SearchRequestMessage::add_count() const {
  // @@protoc_insertion_point(field_get:sse.diana.SearchRequestMessage.add_count)
  return add_count_;
}
inline void SearchRequestMessage::set_add_count(::google::protobuf::uint32 value) {
  
  add_count_ = value;
  // @@protoc_insertion_point(field_set:sse.diana.SearchRequestMessage.add_count)
}

// bytes kw_token = 3;
inline void SearchRequestMessage::clear_kw_token() {
  kw_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequestMessage::kw_token() const {
  // @@protoc_insertion_point(field_get:sse.diana.SearchRequestMessage.kw_token)
  return kw_token_.GetNoArena();
}
inline void SearchRequestMessage::set_kw_token(const ::std::string& value) {
  
  kw_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sse.diana.SearchRequestMessage.kw_token)
}
#if LANG_CXX11
inline void SearchRequestMessage::set_kw_token(::std::string&& value) {
  
  kw_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sse.diana.SearchRequestMessage.kw_token)
}
#endif
inline void SearchRequestMessage::set_kw_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kw_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sse.diana.SearchRequestMessage.kw_token)
}
inline void SearchRequestMessage::set_kw_token(const void* value, size_t size) {
  
  kw_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sse.diana.SearchRequestMessage.kw_token)
}
inline ::std::string* SearchRequestMessage::mutable_kw_token() {
  
  // @@protoc_insertion_point(field_mutable:sse.diana.SearchRequestMessage.kw_token)
  return kw_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequestMessage::release_kw_token() {
  // @@protoc_insertion_point(field_release:sse.diana.SearchRequestMessage.kw_token)
  
  return kw_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_kw_token(::std::string* kw_token) {
  if (kw_token != NULL) {
    
  } else {
    
  }
  kw_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kw_token);
  // @@protoc_insertion_point(field_set_allocated:sse.diana.SearchRequestMessage.kw_token)
}

// -------------------------------------------------------------------

// SearchReply

// uint64 result = 1;
inline void SearchReply::clear_result() {
  result_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearchReply::result() const {
  // @@protoc_insertion_point(field_get:sse.diana.SearchReply.result)
  return result_;
}
inline void SearchReply::set_result(::google::protobuf::uint64 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:sse.diana.SearchReply.result)
}

// -------------------------------------------------------------------

// UpdateRequestMessage

// bytes update_token = 1;
inline void UpdateRequestMessage::clear_update_token() {
  update_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRequestMessage::update_token() const {
  // @@protoc_insertion_point(field_get:sse.diana.UpdateRequestMessage.update_token)
  return update_token_.GetNoArena();
}
inline void UpdateRequestMessage::set_update_token(const ::std::string& value) {
  
  update_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sse.diana.UpdateRequestMessage.update_token)
}
#if LANG_CXX11
inline void UpdateRequestMessage::set_update_token(::std::string&& value) {
  
  update_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sse.diana.UpdateRequestMessage.update_token)
}
#endif
inline void UpdateRequestMessage::set_update_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  update_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sse.diana.UpdateRequestMessage.update_token)
}
inline void UpdateRequestMessage::set_update_token(const void* value, size_t size) {
  
  update_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sse.diana.UpdateRequestMessage.update_token)
}
inline ::std::string* UpdateRequestMessage::mutable_update_token() {
  
  // @@protoc_insertion_point(field_mutable:sse.diana.UpdateRequestMessage.update_token)
  return update_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRequestMessage::release_update_token() {
  // @@protoc_insertion_point(field_release:sse.diana.UpdateRequestMessage.update_token)
  
  return update_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequestMessage::set_allocated_update_token(::std::string* update_token) {
  if (update_token != NULL) {
    
  } else {
    
  }
  update_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_token);
  // @@protoc_insertion_point(field_set_allocated:sse.diana.UpdateRequestMessage.update_token)
}

// uint64 index = 2;
inline void UpdateRequestMessage::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UpdateRequestMessage::index() const {
  // @@protoc_insertion_point(field_get:sse.diana.UpdateRequestMessage.index)
  return index_;
}
inline void UpdateRequestMessage::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:sse.diana.UpdateRequestMessage.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace diana
}  // namespace sse

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_diana_2eproto__INCLUDED
