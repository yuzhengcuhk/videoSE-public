// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diana.proto

#include "diana.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sse {
namespace diana {
class SetupMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetupMessage>
      _instance;
} _SetupMessage_default_instance_;
class SearchTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchToken>
      _instance;
} _SearchToken_default_instance_;
class SearchRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchRequestMessage>
      _instance;
} _SearchRequestMessage_default_instance_;
class SearchReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReply>
      _instance;
} _SearchReply_default_instance_;
class UpdateRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateRequestMessage>
      _instance;
} _UpdateRequestMessage_default_instance_;
}  // namespace diana
}  // namespace sse
namespace protobuf_diana_2eproto {
void InitDefaultsSetupMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sse::diana::_SetupMessage_default_instance_;
    new (ptr) ::sse::diana::SetupMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sse::diana::SetupMessage::InitAsDefaultInstance();
}

void InitDefaultsSetupMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetupMessageImpl);
}

void InitDefaultsSearchTokenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sse::diana::_SearchToken_default_instance_;
    new (ptr) ::sse::diana::SearchToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sse::diana::SearchToken::InitAsDefaultInstance();
}

void InitDefaultsSearchToken() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchTokenImpl);
}

void InitDefaultsSearchRequestMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sse::diana::_SearchRequestMessage_default_instance_;
    new (ptr) ::sse::diana::SearchRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sse::diana::SearchRequestMessage::InitAsDefaultInstance();
}

void InitDefaultsSearchRequestMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchRequestMessageImpl);
}

void InitDefaultsSearchReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sse::diana::_SearchReply_default_instance_;
    new (ptr) ::sse::diana::SearchReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sse::diana::SearchReply::InitAsDefaultInstance();
}

void InitDefaultsSearchReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchReplyImpl);
}

void InitDefaultsUpdateRequestMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sse::diana::_UpdateRequestMessage_default_instance_;
    new (ptr) ::sse::diana::UpdateRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sse::diana::UpdateRequestMessage::InitAsDefaultInstance();
}

void InitDefaultsUpdateRequestMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateRequestMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SetupMessage, wrapping_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchToken, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchToken, depth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchRequestMessage, constrained_rcprf_rep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchRequestMessage, add_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchRequestMessage, kw_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::SearchReply, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::UpdateRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::UpdateRequestMessage, update_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sse::diana::UpdateRequestMessage, index_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sse::diana::SetupMessage)},
  { 6, -1, sizeof(::sse::diana::SearchToken)},
  { 13, -1, sizeof(::sse::diana::SearchRequestMessage)},
  { 21, -1, sizeof(::sse::diana::SearchReply)},
  { 27, -1, sizeof(::sse::diana::UpdateRequestMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sse::diana::_SetupMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sse::diana::_SearchToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sse::diana::_SearchRequestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sse::diana::_SearchReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sse::diana::_UpdateRequestMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "diana.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013diana.proto\022\tsse.diana\032\033google/protobu"
      "f/empty.proto\"$\n\014SetupMessage\022\024\n\014wrappin"
      "g_key\030\001 \001(\014\"+\n\013SearchToken\022\r\n\005token\030\001 \001("
      "\014\022\r\n\005depth\030\002 \001(\r\"Z\n\024SearchRequestMessage"
      "\022\035\n\025constrained_rcprf_rep\030\001 \001(\014\022\021\n\tadd_c"
      "ount\030\002 \001(\007\022\020\n\010kw_token\030\003 \001(\014\"\035\n\013SearchRe"
      "ply\022\016\n\006result\030\001 \001(\004\";\n\024UpdateRequestMess"
      "age\022\024\n\014update_token\030\001 \001(\014\022\r\n\005index\030\002 \001(\004"
      "2\233\002\n\005Diana\022:\n\005setup\022\027.sse.diana.SetupMes"
      "sage\032\026.google.protobuf.Empty\"\000\022E\n\006search"
      "\022\037.sse.diana.SearchRequestMessage\032\026.sse."
      "diana.SearchReply\"\0000\001\022C\n\006insert\022\037.sse.di"
      "ana.UpdateRequestMessage\032\026.google.protob"
      "uf.Empty\"\000\022J\n\013bulk_insert\022\037.sse.diana.Up"
      "dateRequestMessage\032\026.google.protobuf.Emp"
      "ty\"\000(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diana.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diana_2eproto
namespace sse {
namespace diana {

// ===================================================================

void SetupMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetupMessage::kWrappingKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetupMessage::SetupMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_diana_2eproto::InitDefaultsSetupMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sse.diana.SetupMessage)
}
SetupMessage::SetupMessage(const SetupMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wrapping_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wrapping_key().size() > 0) {
    wrapping_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wrapping_key_);
  }
  // @@protoc_insertion_point(copy_constructor:sse.diana.SetupMessage)
}

void SetupMessage::SharedCtor() {
  wrapping_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SetupMessage::~SetupMessage() {
  // @@protoc_insertion_point(destructor:sse.diana.SetupMessage)
  SharedDtor();
}

void SetupMessage::SharedDtor() {
  wrapping_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetupMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetupMessage::descriptor() {
  ::protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetupMessage& SetupMessage::default_instance() {
  ::protobuf_diana_2eproto::InitDefaultsSetupMessage();
  return *internal_default_instance();
}

SetupMessage* SetupMessage::New(::google::protobuf::Arena* arena) const {
  SetupMessage* n = new SetupMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sse.diana.SetupMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wrapping_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SetupMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sse.diana.SetupMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes wrapping_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wrapping_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sse.diana.SetupMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sse.diana.SetupMessage)
  return false;
#undef DO_
}

void SetupMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sse.diana.SetupMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wrapping_key = 1;
  if (this->wrapping_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wrapping_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sse.diana.SetupMessage)
}

::google::protobuf::uint8* SetupMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sse.diana.SetupMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wrapping_key = 1;
  if (this->wrapping_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wrapping_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sse.diana.SetupMessage)
  return target;
}

size_t SetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sse.diana.SetupMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes wrapping_key = 1;
  if (this->wrapping_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->wrapping_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetupMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sse.diana.SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetupMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sse.diana.SetupMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sse.diana.SetupMessage)
    MergeFrom(*source);
  }
}

void SetupMessage::MergeFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sse.diana.SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wrapping_key().size() > 0) {

    wrapping_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wrapping_key_);
  }
}

void SetupMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sse.diana.SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupMessage::CopyFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sse.diana.SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMessage::IsInitialized() const {
  return true;
}

void SetupMessage::Swap(SetupMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetupMessage::InternalSwap(SetupMessage* other) {
  using std::swap;
  wrapping_key_.Swap(&other->wrapping_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetupMessage::GetMetadata() const {
  protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchToken::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchToken::kTokenFieldNumber;
const int SearchToken::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchToken::SearchToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_diana_2eproto::InitDefaultsSearchToken();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sse.diana.SearchToken)
}
SearchToken::SearchToken(const SearchToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  depth_ = from.depth_;
  // @@protoc_insertion_point(copy_constructor:sse.diana.SearchToken)
}

void SearchToken::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0u;
  _cached_size_ = 0;
}

SearchToken::~SearchToken() {
  // @@protoc_insertion_point(destructor:sse.diana.SearchToken)
  SharedDtor();
}

void SearchToken::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchToken::descriptor() {
  ::protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchToken& SearchToken::default_instance() {
  ::protobuf_diana_2eproto::InitDefaultsSearchToken();
  return *internal_default_instance();
}

SearchToken* SearchToken::New(::google::protobuf::Arena* arena) const {
  SearchToken* n = new SearchToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchToken::Clear() {
// @@protoc_insertion_point(message_clear_start:sse.diana.SearchToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0u;
  _internal_metadata_.Clear();
}

bool SearchToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sse.diana.SearchToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 depth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sse.diana.SearchToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sse.diana.SearchToken)
  return false;
#undef DO_
}

void SearchToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sse.diana.SearchToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->token(), output);
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depth(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sse.diana.SearchToken)
}

::google::protobuf::uint8* SearchToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sse.diana.SearchToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->token(), target);
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depth(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sse.diana.SearchToken)
  return target;
}

size_t SearchToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sse.diana.SearchToken)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sse.diana.SearchToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sse.diana.SearchToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sse.diana.SearchToken)
    MergeFrom(*source);
  }
}

void SearchToken::MergeFrom(const SearchToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sse.diana.SearchToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
}

void SearchToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sse.diana.SearchToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchToken::CopyFrom(const SearchToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sse.diana.SearchToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchToken::IsInitialized() const {
  return true;
}

void SearchToken::Swap(SearchToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchToken::InternalSwap(SearchToken* other) {
  using std::swap;
  token_.Swap(&other->token_);
  swap(depth_, other->depth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchToken::GetMetadata() const {
  protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequestMessage::kConstrainedRcprfRepFieldNumber;
const int SearchRequestMessage::kAddCountFieldNumber;
const int SearchRequestMessage::kKwTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequestMessage::SearchRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_diana_2eproto::InitDefaultsSearchRequestMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sse.diana.SearchRequestMessage)
}
SearchRequestMessage::SearchRequestMessage(const SearchRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  constrained_rcprf_rep_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.constrained_rcprf_rep().size() > 0) {
    constrained_rcprf_rep_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constrained_rcprf_rep_);
  }
  kw_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kw_token().size() > 0) {
    kw_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kw_token_);
  }
  add_count_ = from.add_count_;
  // @@protoc_insertion_point(copy_constructor:sse.diana.SearchRequestMessage)
}

void SearchRequestMessage::SharedCtor() {
  constrained_rcprf_rep_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kw_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_count_ = 0u;
  _cached_size_ = 0;
}

SearchRequestMessage::~SearchRequestMessage() {
  // @@protoc_insertion_point(destructor:sse.diana.SearchRequestMessage)
  SharedDtor();
}

void SearchRequestMessage::SharedDtor() {
  constrained_rcprf_rep_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kw_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequestMessage::descriptor() {
  ::protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRequestMessage& SearchRequestMessage::default_instance() {
  ::protobuf_diana_2eproto::InitDefaultsSearchRequestMessage();
  return *internal_default_instance();
}

SearchRequestMessage* SearchRequestMessage::New(::google::protobuf::Arena* arena) const {
  SearchRequestMessage* n = new SearchRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sse.diana.SearchRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constrained_rcprf_rep_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kw_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_count_ = 0u;
  _internal_metadata_.Clear();
}

bool SearchRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sse.diana.SearchRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes constrained_rcprf_rep = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_constrained_rcprf_rep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 add_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &add_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes kw_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kw_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sse.diana.SearchRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sse.diana.SearchRequestMessage)
  return false;
#undef DO_
}

void SearchRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sse.diana.SearchRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes constrained_rcprf_rep = 1;
  if (this->constrained_rcprf_rep().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->constrained_rcprf_rep(), output);
  }

  // fixed32 add_count = 2;
  if (this->add_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->add_count(), output);
  }

  // bytes kw_token = 3;
  if (this->kw_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->kw_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sse.diana.SearchRequestMessage)
}

::google::protobuf::uint8* SearchRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sse.diana.SearchRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes constrained_rcprf_rep = 1;
  if (this->constrained_rcprf_rep().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->constrained_rcprf_rep(), target);
  }

  // fixed32 add_count = 2;
  if (this->add_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->add_count(), target);
  }

  // bytes kw_token = 3;
  if (this->kw_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->kw_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sse.diana.SearchRequestMessage)
  return target;
}

size_t SearchRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sse.diana.SearchRequestMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes constrained_rcprf_rep = 1;
  if (this->constrained_rcprf_rep().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->constrained_rcprf_rep());
  }

  // bytes kw_token = 3;
  if (this->kw_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->kw_token());
  }

  // fixed32 add_count = 2;
  if (this->add_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sse.diana.SearchRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sse.diana.SearchRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sse.diana.SearchRequestMessage)
    MergeFrom(*source);
  }
}

void SearchRequestMessage::MergeFrom(const SearchRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sse.diana.SearchRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.constrained_rcprf_rep().size() > 0) {

    constrained_rcprf_rep_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constrained_rcprf_rep_);
  }
  if (from.kw_token().size() > 0) {

    kw_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kw_token_);
  }
  if (from.add_count() != 0) {
    set_add_count(from.add_count());
  }
}

void SearchRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sse.diana.SearchRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequestMessage::CopyFrom(const SearchRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sse.diana.SearchRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequestMessage::IsInitialized() const {
  return true;
}

void SearchRequestMessage::Swap(SearchRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequestMessage::InternalSwap(SearchRequestMessage* other) {
  using std::swap;
  constrained_rcprf_rep_.Swap(&other->constrained_rcprf_rep_);
  kw_token_.Swap(&other->kw_token_);
  swap(add_count_, other->add_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRequestMessage::GetMetadata() const {
  protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReply::SearchReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_diana_2eproto::InitDefaultsSearchReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sse.diana.SearchReply)
}
SearchReply::SearchReply(const SearchReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:sse.diana.SearchReply)
}

void SearchReply::SharedCtor() {
  result_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SearchReply::~SearchReply() {
  // @@protoc_insertion_point(destructor:sse.diana.SearchReply)
  SharedDtor();
}

void SearchReply::SharedDtor() {
}

void SearchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReply::descriptor() {
  ::protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReply& SearchReply::default_instance() {
  ::protobuf_diana_2eproto::InitDefaultsSearchReply();
  return *internal_default_instance();
}

SearchReply* SearchReply::New(::google::protobuf::Arena* arena) const {
  SearchReply* n = new SearchReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sse.diana.SearchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SearchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sse.diana.SearchReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sse.diana.SearchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sse.diana.SearchReply)
  return false;
#undef DO_
}

void SearchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sse.diana.SearchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sse.diana.SearchReply)
}

::google::protobuf::uint8* SearchReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sse.diana.SearchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sse.diana.SearchReply)
  return target;
}

size_t SearchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sse.diana.SearchReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sse.diana.SearchReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sse.diana.SearchReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sse.diana.SearchReply)
    MergeFrom(*source);
  }
}

void SearchReply::MergeFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sse.diana.SearchReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SearchReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sse.diana.SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReply::CopyFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sse.diana.SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply::IsInitialized() const {
  return true;
}

void SearchReply::Swap(SearchReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchReply::InternalSwap(SearchReply* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReply::GetMetadata() const {
  protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRequestMessage::kUpdateTokenFieldNumber;
const int UpdateRequestMessage::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRequestMessage::UpdateRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_diana_2eproto::InitDefaultsUpdateRequestMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sse.diana.UpdateRequestMessage)
}
UpdateRequestMessage::UpdateRequestMessage(const UpdateRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_token().size() > 0) {
    update_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_token_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:sse.diana.UpdateRequestMessage)
}

void UpdateRequestMessage::SharedCtor() {
  update_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

UpdateRequestMessage::~UpdateRequestMessage() {
  // @@protoc_insertion_point(destructor:sse.diana.UpdateRequestMessage)
  SharedDtor();
}

void UpdateRequestMessage::SharedDtor() {
  update_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRequestMessage::descriptor() {
  ::protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRequestMessage& UpdateRequestMessage::default_instance() {
  ::protobuf_diana_2eproto::InitDefaultsUpdateRequestMessage();
  return *internal_default_instance();
}

UpdateRequestMessage* UpdateRequestMessage::New(::google::protobuf::Arena* arena) const {
  UpdateRequestMessage* n = new UpdateRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sse.diana.UpdateRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool UpdateRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sse.diana.UpdateRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes update_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sse.diana.UpdateRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sse.diana.UpdateRequestMessage)
  return false;
#undef DO_
}

void UpdateRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sse.diana.UpdateRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes update_token = 1;
  if (this->update_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_token(), output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sse.diana.UpdateRequestMessage)
}

::google::protobuf::uint8* UpdateRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sse.diana.UpdateRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes update_token = 1;
  if (this->update_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->update_token(), target);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sse.diana.UpdateRequestMessage)
  return target;
}

size_t UpdateRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sse.diana.UpdateRequestMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes update_token = 1;
  if (this->update_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->update_token());
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sse.diana.UpdateRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sse.diana.UpdateRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sse.diana.UpdateRequestMessage)
    MergeFrom(*source);
  }
}

void UpdateRequestMessage::MergeFrom(const UpdateRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sse.diana.UpdateRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_token().size() > 0) {

    update_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_token_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void UpdateRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sse.diana.UpdateRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequestMessage::CopyFrom(const UpdateRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sse.diana.UpdateRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequestMessage::IsInitialized() const {
  return true;
}

void UpdateRequestMessage::Swap(UpdateRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRequestMessage::InternalSwap(UpdateRequestMessage* other) {
  using std::swap;
  update_token_.Swap(&other->update_token_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRequestMessage::GetMetadata() const {
  protobuf_diana_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diana_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diana
}  // namespace sse

// @@protoc_insertion_point(global_scope)
